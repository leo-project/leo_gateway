%%
%% src/leo_nlm_proto4_xdr was generated by erpcgen (do not edit)
%%
-module(leo_nlm_proto4_xdr).
-export([enc_netobj/1, dec_netobj/2]).
-export([enc_uint64/1, dec_uint64/2]).
-export([enc_int64/1, dec_int64/2]).
-export([enc_uint33/1, dec_uint33/2]).
-export([enc_int32/1, dec_int32/2]).
-export([enc_nlm4_stats/1, dec_nlm4_stats/2, dec_nlm4_stats_i2a/1]).
-export([enc_nlm4_holder/1, dec_nlm4_holder/2]).
-export([enc_nlm4_testrply/1, dec_nlm4_testrply/2]).
-export([enc_nlm4_stat/1, dec_nlm4_stat/2]).
-export([enc_nlm4_res/1, dec_nlm4_res/2]).
-export([enc_nlm4_testres/1, dec_nlm4_testres/2]).
-export([enc_nlm4_lock/1, dec_nlm4_lock/2]).
-export([enc_nlm4_lockargs/1, dec_nlm4_lockargs/2]).
-export([enc_nlm4_cancargs/1, dec_nlm4_cancargs/2]).
-export([enc_nlm4_testargs/1, dec_nlm4_testargs/2]).
-export([enc_nlm4_unlockargs/1, dec_nlm4_unlockargs/2]).
-export([enc_fsh4_mode/1, dec_fsh4_mode/2, dec_fsh4_mode_i2a/1]).
-export([enc_fsh4_access/1, dec_fsh4_access/2, dec_fsh4_access_i2a/1]).
-export([enc_nlm4_share/1, dec_nlm4_share/2]).
-export([enc_nlm4_shareargs/1, dec_nlm4_shareargs/2]).
-export([enc_nlm4_shareres/1, dec_nlm4_shareres/2]).
-export([enc_nlm4_notify/1, dec_nlm4_notify/2]).

enc_netobj(_1) ->
    begin
        _2 = io_list_len(_1),
        if
            _2 =< 1024 ->
                [<<_2:32/unsigned>>,_1,enc_align(_2)];
            true ->
                exit({xdr,limit})
        end
    end.

dec_netobj(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        if
            _3 > 1024 ->
                exit({xdr,limit});
            true ->
                _4 = _2 + 4,
                <<_:_4/binary,_5:_3/binary,_/binary>> = _1,
                {_5,_4 + align(_3)}
        end
    end.

enc_uint64(_1) ->
    <<_1:64>>.

dec_uint64(_1, _2) ->
    begin
        <<_:_2/binary,_3:64/unsigned,_/binary>> = _1,
        {_3,_2 + 8}
    end.

enc_int64(_1) ->
    <<_1:64>>.

dec_int64(_1, _2) ->
    begin
        <<_:_2/binary,_3:64/signed,_/binary>> = _1,
        {_3,_2 + 8}
    end.

enc_uint33(_1) ->
    <<_1:32>>.

dec_uint33(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/unsigned,_/binary>> = _1,
        {_3,_2 + 4}
    end.

enc_int32(_1) ->
    <<_1:32>>.

dec_int32(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        {_3,_2 + 4}
    end.

enc_nlm4_stats(_1) ->
    case _1 of
        'NLM4_GRANTED' ->
            <<0:32>>;
        'NLM4_DENIED' ->
            <<1:32>>;
        'NLM4_DENIED_NOLOCKS' ->
            <<2:32>>;
        'NLM4_BLOCKED' ->
            <<3:32>>;
        'NLM4_DENIED_GRACE_PERIOD' ->
            <<4:32>>;
        'NLM4_DEADLCK' ->
            <<5:32>>;
        'NLM4_ROFS' ->
            <<6:32>>;
        'NLM4_STALE_FH' ->
            <<7:32>>;
        'NLM4_FBIG' ->
            <<8:32>>;
        'NLM4_FAILED' ->
            <<9:32>>
    end.

dec_nlm4_stats(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            0 ->
                {'NLM4_GRANTED',_2 + 4};
            1 ->
                {'NLM4_DENIED',_2 + 4};
            2 ->
                {'NLM4_DENIED_NOLOCKS',_2 + 4};
            3 ->
                {'NLM4_BLOCKED',_2 + 4};
            4 ->
                {'NLM4_DENIED_GRACE_PERIOD',_2 + 4};
            5 ->
                {'NLM4_DEADLCK',_2 + 4};
            6 ->
                {'NLM4_ROFS',_2 + 4};
            7 ->
                {'NLM4_STALE_FH',_2 + 4};
            8 ->
                {'NLM4_FBIG',_2 + 4};
            9 ->
                {'NLM4_FAILED',_2 + 4}
        end
    end.

dec_nlm4_stats_i2a(_4) ->
    case _4 of
        0 ->
            'NLM4_GRANTED';
        1 ->
            'NLM4_DENIED';
        2 ->
            'NLM4_DENIED_NOLOCKS';
        3 ->
            'NLM4_BLOCKED';
        4 ->
            'NLM4_DENIED_GRACE_PERIOD';
        5 ->
            'NLM4_DEADLCK';
        6 ->
            'NLM4_ROFS';
        7 ->
            'NLM4_STALE_FH';
        8 ->
            'NLM4_FBIG';
        9 ->
            'NLM4_FAILED'
    end.

enc_nlm4_holder(_1) ->
    case _1 of
        {_6,_5,_4,_3,_2} ->
            [if
                 _6 == true ->
                     <<1:32>>;
                 _6 == false ->
                     <<0:32>>
             end,
             enc_int32(_5),
             enc_netobj(_4),
             enc_uint64(_3),
             enc_uint64(_2)]
    end.

dec_nlm4_holder(_1, _2) ->
    begin
        begin
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                _3 =
                    if
                        _5 == 0 ->
                            false;
                        _5 == 1 ->
                            true
                    end
            end,
            _4 = _2 + 4
        end,
        {_6,_7} = dec_int32(_1, _4),
        {_8,_9} = dec_netobj(_1, _7),
        {_10,_11} = dec_uint64(_1, _9),
        {_12,_13} = dec_uint64(_1, _11),
        {{_3,_6,_8,_10,_12},_13}
    end.

enc_nlm4_testrply(_1) ->
    case _1 of
        {_2,_3} ->
            [enc_nlm4_stats(_2),
             case _2 of
                 'NLM4_DENIED' ->
                     enc_nlm4_holder(_3);
                 _ ->
                     []
             end]
    end.

dec_nlm4_testrply(_1, _2) ->
    begin
        <<_:_2/binary,_3:32/signed,_/binary>> = _1,
        _6 = _2 + 4,
        case _3 of
            1 ->
                {_4,_5} = dec_nlm4_holder(_1, _6),
                {{'NLM4_DENIED',_4},_5};
            _ ->
                {_4,_5} = {void,_6},
                _7 = dec_nlm4_stats_i2a(_3),
                {{_7,_4},_5}
        end
    end.

enc_nlm4_stat(_1) ->
    case _1 of
        {_2} ->
            [enc_nlm4_stats(_2)]
    end.

dec_nlm4_stat(_1, _2) ->
    begin
        {_3,_4} = dec_nlm4_stats(_1, _2),
        {{_3},_4}
    end.

enc_nlm4_res(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_netobj(_3),enc_nlm4_stat(_2)]
    end.

dec_nlm4_res(_1, _2) ->
    begin
        {_3,_4} = dec_netobj(_1, _2),
        {_5,_6} = dec_nlm4_stat(_1, _4),
        {{_3,_5},_6}
    end.

enc_nlm4_testres(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_netobj(_3),enc_nlm4_testrply(_2)]
    end.

dec_nlm4_testres(_1, _2) ->
    begin
        {_3,_4} = dec_netobj(_1, _2),
        {_5,_6} = dec_nlm4_testrply(_1, _4),
        {{_3,_5},_6}
    end.

enc_nlm4_lock(_1) ->
    case _1 of
        {_7,_6,_5,_4,_3,_2} ->
            [begin
                 _8 = io_list_len(_7),
                 if
                     _8 =< 1024 ->
                         [<<_8:32/unsigned>>,_7,enc_align(_8)];
                     true ->
                         exit({xdr,limit})
                 end
             end,
             enc_netobj(_6),
             enc_netobj(_5),
             enc_int32(_4),
             enc_uint64(_3),
             enc_uint64(_2)]
    end.

dec_nlm4_lock(_1, _2) ->
    begin
        {_3,_4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 1024 ->
                        exit({xdr,limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7,_6 + align(_5)}
                end
            end,
        {_8,_9} = dec_netobj(_1, _4),
        {_10,_11} = dec_netobj(_1, _9),
        {_12,_13} = dec_int32(_1, _11),
        {_14,_15} = dec_uint64(_1, _13),
        {_16,_17} = dec_uint64(_1, _15),
        {{_3,_8,_10,_12,_14,_16},_17}
    end.

enc_nlm4_lockargs(_1) ->
    case _1 of
        {_7,_6,_5,_4,_3,_2} ->
            [enc_netobj(_7),
             if
                 _6 == true ->
                     <<1:32>>;
                 _6 == false ->
                     <<0:32>>
             end,
             if
                 _5 == true ->
                     <<1:32>>;
                 _5 == false ->
                     <<0:32>>
             end,
             enc_nlm4_lock(_4),
             if
                 _3 == true ->
                     <<1:32>>;
                 _3 == false ->
                     <<0:32>>
             end,
             <<_2:32>>]
    end.

dec_nlm4_lockargs(_1, _2) ->
    begin
        {_3,_4} = dec_netobj(_1, _2),
        begin
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                _5 =
                    if
                        _7 == 0 ->
                            false;
                        _7 == 1 ->
                            true
                    end
            end,
            _6 = _4 + 4
        end,
        begin
            begin
                <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
                _8 =
                    if
                        _10 == 0 ->
                            false;
                        _10 == 1 ->
                            true
                    end
            end,
            _9 = _6 + 4
        end,
        {_11,_12} = dec_nlm4_lock(_1, _9),
        begin
            begin
                <<_:_12/binary,_15:32/unsigned,_/binary>> = _1,
                _13 =
                    if
                        _15 == 0 ->
                            false;
                        _15 == 1 ->
                            true
                    end
            end,
            _14 = _12 + 4
        end,
        begin
            <<_:_14/binary,_16:32/signed,_/binary>> = _1,
            _17 = _14 + 4
        end,
        {{_3,_5,_8,_11,_13,_16},_17}
    end.

enc_nlm4_cancargs(_1) ->
    case _1 of
        {_5,_4,_3,_2} ->
            [enc_netobj(_5),
             if
                 _4 == true ->
                     <<1:32>>;
                 _4 == false ->
                     <<0:32>>
             end,
             if
                 _3 == true ->
                     <<1:32>>;
                 _3 == false ->
                     <<0:32>>
             end,
             enc_nlm4_lock(_2)]
    end.

dec_nlm4_cancargs(_1, _2) ->
    begin
        {_3,_4} = dec_netobj(_1, _2),
        begin
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                _5 =
                    if
                        _7 == 0 ->
                            false;
                        _7 == 1 ->
                            true
                    end
            end,
            _6 = _4 + 4
        end,
        begin
            begin
                <<_:_6/binary,_10:32/unsigned,_/binary>> = _1,
                _8 =
                    if
                        _10 == 0 ->
                            false;
                        _10 == 1 ->
                            true
                    end
            end,
            _9 = _6 + 4
        end,
        {_11,_12} = dec_nlm4_lock(_1, _9),
        {{_3,_5,_8,_11},_12}
    end.

enc_nlm4_testargs(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_netobj(_4),
             if
                 _3 == true ->
                     <<1:32>>;
                 _3 == false ->
                     <<0:32>>
             end,
             enc_nlm4_lock(_2)]
    end.

dec_nlm4_testargs(_1, _2) ->
    begin
        {_3,_4} = dec_netobj(_1, _2),
        begin
            begin
                <<_:_4/binary,_7:32/unsigned,_/binary>> = _1,
                _5 =
                    if
                        _7 == 0 ->
                            false;
                        _7 == 1 ->
                            true
                    end
            end,
            _6 = _4 + 4
        end,
        {_8,_9} = dec_nlm4_lock(_1, _6),
        {{_3,_5,_8},_9}
    end.

enc_nlm4_unlockargs(_1) ->
    case _1 of
        {_3,_2} ->
            [enc_netobj(_3),enc_nlm4_lock(_2)]
    end.

dec_nlm4_unlockargs(_1, _2) ->
    begin
        {_3,_4} = dec_netobj(_1, _2),
        {_5,_6} = dec_nlm4_lock(_1, _4),
        {{_3,_5},_6}
    end.

enc_fsh4_mode(_1) ->
    case _1 of
        fsm_DN ->
            <<0:32>>;
        fsm_DR ->
            <<1:32>>;
        fsm_DW ->
            <<2:32>>;
        fsm_DRW ->
            <<3:32>>
    end.

dec_fsh4_mode(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            0 ->
                {fsm_DN,_2 + 4};
            1 ->
                {fsm_DR,_2 + 4};
            2 ->
                {fsm_DW,_2 + 4};
            3 ->
                {fsm_DRW,_2 + 4}
        end
    end.

dec_fsh4_mode_i2a(_4) ->
    case _4 of
        0 ->
            fsm_DN;
        1 ->
            fsm_DR;
        2 ->
            fsm_DW;
        3 ->
            fsm_DRW
    end.

enc_fsh4_access(_1) ->
    case _1 of
        fsa_NONE ->
            <<0:32>>;
        fsa_R ->
            <<1:32>>;
        fsa_W ->
            <<2:32>>;
        fsa_RW ->
            <<3:32>>
    end.

dec_fsh4_access(_1, _2) ->
    begin
        <<_:_2/binary,_3:32,_/binary>> = _1,
        case _3 of
            0 ->
                {fsa_NONE,_2 + 4};
            1 ->
                {fsa_R,_2 + 4};
            2 ->
                {fsa_W,_2 + 4};
            3 ->
                {fsa_RW,_2 + 4}
        end
    end.

dec_fsh4_access_i2a(_4) ->
    case _4 of
        0 ->
            fsa_NONE;
        1 ->
            fsa_R;
        2 ->
            fsa_W;
        3 ->
            fsa_RW
    end.

enc_nlm4_share(_1) ->
    case _1 of
        {_6,_5,_4,_3,_2} ->
            [begin
                 _7 = io_list_len(_6),
                 if
                     _7 =< 1024 ->
                         [<<_7:32/unsigned>>,_6,enc_align(_7)];
                     true ->
                         exit({xdr,limit})
                 end
             end,
             enc_netobj(_5),
             enc_netobj(_4),
             enc_fsh4_mode(_3),
             enc_fsh4_access(_2)]
    end.

dec_nlm4_share(_1, _2) ->
    begin
        {_3,_4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 1024 ->
                        exit({xdr,limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7,_6 + align(_5)}
                end
            end,
        {_8,_9} = dec_netobj(_1, _4),
        {_10,_11} = dec_netobj(_1, _9),
        {_12,_13} = dec_fsh4_mode(_1, _11),
        {_14,_15} = dec_fsh4_access(_1, _13),
        {{_3,_8,_10,_12,_14},_15}
    end.

enc_nlm4_shareargs(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_netobj(_4),
             enc_nlm4_share(_3),
             if
                 _2 == true ->
                     <<1:32>>;
                 _2 == false ->
                     <<0:32>>
             end]
    end.

dec_nlm4_shareargs(_1, _2) ->
    begin
        {_3,_4} = dec_netobj(_1, _2),
        {_5,_6} = dec_nlm4_share(_1, _4),
        begin
            begin
                <<_:_6/binary,_9:32/unsigned,_/binary>> = _1,
                _7 =
                    if
                        _9 == 0 ->
                            false;
                        _9 == 1 ->
                            true
                    end
            end,
            _8 = _6 + 4
        end,
        {{_3,_5,_7},_8}
    end.

enc_nlm4_shareres(_1) ->
    case _1 of
        {_4,_3,_2} ->
            [enc_netobj(_4),enc_nlm4_stats(_3),<<_2:32>>]
    end.

dec_nlm4_shareres(_1, _2) ->
    begin
        {_3,_4} = dec_netobj(_1, _2),
        {_5,_6} = dec_nlm4_stats(_1, _4),
        begin
            <<_:_6/binary,_7:32/signed,_/binary>> = _1,
            _8 = _6 + 4
        end,
        {{_3,_5,_7},_8}
    end.

enc_nlm4_notify(_1) ->
    case _1 of
        {_3,_2} ->
            [begin
                 _4 = io_list_len(_3),
                 if
                     _4 =< 1025 ->
                         [<<_4:32/unsigned>>,_3,enc_align(_4)];
                     true ->
                         exit({xdr,limit})
                 end
             end,
             <<_2:32>>]
    end.

dec_nlm4_notify(_1, _2) ->
    begin
        {_3,_4} =
            begin
                <<_:_2/binary,_5:32/unsigned,_/binary>> = _1,
                if
                    _5 > 1025 ->
                        exit({xdr,limit});
                    true ->
                        _6 = _2 + 4,
                        <<_:_6/binary,_7:_5/binary,_/binary>> = _1,
                        {_7,_6 + align(_5)}
                end
            end,
        begin
            <<_:_4/binary,_8:32/signed,_/binary>> = _1,
            _9 = _4 + 4
        end,
        {{_3,_8},_9}
    end.

io_list_len(L) -> io_list_len(L, 0).
io_list_len([H|T], N) ->
  if
    H >= 0, H =< 255 -> io_list_len(T, N+1);
    is_list(H) -> io_list_len(T, io_list_len(H,N));
    is_binary(H) -> io_list_len(T, size(H) + N);
    true -> exit({xdr, opaque})
  end;
io_list_len(H, N) when is_binary(H) ->
  size(H) + N;
io_list_len([], N) ->
N.

enc_align(Len) ->
  case Len rem 4 of
    0 -> <<>>;
    1 -> <<0,0,0>>;
    2 -> <<0,0>>;
    3 -> <<0>>
  end.

align(Len) ->
  case Len rem 4 of
    0 -> Len;
    1 -> Len+3;
    2 -> Len+2;
    3 -> Len+1
  end.
